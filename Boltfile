#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" `Bolt <http://pypi.python.org/pypi/bolt>`_ script to automate deployment.
"""

import re
from pkg_resources import require
from commands import getoutput

from os.path import dirname, exists, join as join_path
here = dirname(__file__)

from bolt.api import *

@task
def compile():
    """ Update and compile .po files into .mo files.
    """
    
    require('babel')
    
    with cd(here):
        local('pybabel compile --domain=wikihouse --directory static/i18n --use-fuzzy')
        
    


@task
def scrape_yaml():
    """ Extract message strings from YAML config into a template
      that babel knows how to parse.
    """
    
    import yaml
    
    items = []
    
    sock = open('series.yaml', 'r')
    series = yaml.load(sock)
    sock.close()
    for item in series:
        items.append(item.get('description'))
    
    sock = open('quotes.yaml', 'r')
    series = yaml.load(sock)
    sock.close()
    for item in series:
        items.append(item.get('content'))
    
    items = ["_(u'%s')" % item.replace("'", r"\'") for item in items]
    sock = open(join_path('templates', 'yaml_message_strings.tmpl'), 'w')
    sock.write('<%\n')
    sock.write('\n'.join(items))
    sock.write('\n%>')
    sock.close()
    


@task
def extract():
    """ Extract message files.
    """
    
    require('babel')
    
    scrape_yaml()
    
    from config import settings
    with cd(here):
        local('pybabel extract -F babel.cfg -o static/i18n/messages.pot .')
        for item in settings.get('supported_languages'):
            path = join_path(here, 'static', 'i18n', item, 'LC_MESSAGES', 'wikihouse.po')
            if not exists(path):
                local('pybabel init --domain=wikihouse --input-file=static/i18n/messages.pot --output-dir=static/i18n --locale=%s' % item)
        local('pybabel update --domain=wikihouse --input-file=static/i18n/messages.pot --output-dir=static/i18n')
    
    # Update `message_strings.json` data.
    import babel.messages.extract
    import json 
    
    sock = open('assets.json')
    data = json.loads(sock.read())
    sock.close()
    
    file_path = 'static/build/%s' % data.get('js/wikihouse.js')
    items = babel.messages.extract.extract_from_file('javascript', file_path)
    messages = [item[1] for item in items]
    
    sock = open('static/i18n/message_strings.json', 'w')
    sock.write(json.dumps(messages))
    sock.close()
    


@task
def autotranslate(language=None):
    """
    """
    
    require('po_translate')
    
    from config import settings
    source_lang = settings.get('default_language')
    if language is None:
        dest_langs = settings.get('supported_languages')[:]
        dest_langs.pop(dest_langs.index(source_lang))
    else:
        dest_langs = [language]
    with cd(here):
        for item in dest_langs:
            local(
                'python po_translate.py static/i18n/%s/LC_MESSAGES/wikihouse.po static/i18n/%s/LC_MESSAGES/wikihouse.po %s %s' % (
                    source_lang,
                    item,
                    source_lang,
                    item
                )
            )
        
    


@task
def i18n(translate=False):
    extract()
    if translate:
        autotranslate()
    compile()
    


@task
def build():
    """ Kill any running assetgen processes and build the production static files.
    """
    
    require('assetgen')
    
    # Kill any assetgen processes.
    ps_id = re.compile(r'^\S+\s+([0-9]+)', re.M)
    ps_ids = ps_id.findall(getoutput('ps -aux | grep [a]ssetgen'))
    if len(ps_ids):
        local('kill %s' % ' '.join(ps_ids))
    
    # Run assetgen.
    with cd(here):
        local('assetgen assetgen.yaml --force')
        
    


@task
def update():
    """ Update appengine.
    """
    
    with cd(here):
        local('appcfg.py update .')
        
    
    


@task
def deploy(translate=False):
    """ Build and deploy.
    """
    
    build()
    i18n(translate=translate)
    update()
    

