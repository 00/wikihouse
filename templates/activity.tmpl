<!DOCTYPE HTML>
<html>
  <head>
    <title>
      WikiHouse ${_(u'Activity Screen')}
    </title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="pragma" content="no-cache" />
    <meta http-equiv="expires" content="Fri, 01 Jan 1990 00:00:00 GMT" />
    <meta http-equiv="refresh" content="${5 * 60}" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="${get_static_url('css/reset.css')}" />
    <style>
      body {
        background: #ccc;
      }
      img {
        position: absolute;
        background: white;
      }
    </style>
    <base href="${request.host_url}" />
  </head>
  <body>
    <div class="activity-screen">
      % for item in items:
        <img src="${item}" />
      % endfor
    </div>
    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js">
    </script>
    <script>
      /*
       * jQuery shuffle
       *
       * Copyright (c) 2008 Ca-Phun Ung <caphun at yelotofu dot com>
       * Dual licensed under the MIT (MIT-LICENSE.txt)
       * and GPL (GPL-LICENSE.txt) licenses.
       *
       * http://yelotofu.com/labs/jquery/snippets/shuffle/
       *
       * Shuffles an array or the children of a element container.
       * This uses the Fisher-Yates shuffle algorithm <http://jsfromhell.com/array/shuffle [v1.0]>
       */

      (function($){

      	$.fn.shuffle = function() {
      		return this.each(function(){
      			var items = $(this).children().clone(true);
      			return (items.length) ? $(this).html($.shuffle(items)) : this;
      		});
      	}

      	$.shuffle = function(arr) {
      		for(var j, x, i = arr.length; i; j = parseInt(Math.random() * i), x = arr[--i], arr[i] = arr[j], arr[j] = x);
      		return arr;
      	}

      })(jQuery);
      /*
      Script: RectanglePacker.js
      	An algorithm implementation in JavaScript for rectangle packing.

      Author:
      	IvÃ¡n Montes <drslump@drslump.biz>, <http://blog.netxus.es>

      License:
      	LGPL - Lesser General Public License

      Credits:
      	- Algorithm based on <http://www.blackpawn.com/texts/lightmaps/default.html>
      */

      /*
      	Class: NETXUS.RectanglePacker
      	A class that finds an 'efficient' position for a rectangle inside another rectangle
      	without overlapping the space already taken.

      	Algorithm based on <http://www.blackpawn.com/texts/lightmaps/default.html>

      	It uses a binary tree to partition the space of the parent rectangle and allocate the 
      	passed rectangles by dividing the partitions into filled and empty.
      */


      // Create a NETXUS namespace object if it doesn't exists
      if (typeof NETXUS === 'undefined')
      	var NETXUS = function() {};		


      /*	
      	Constructor: NETXUS.RectanglePacker
      	Initializes the object with the given maximum dimensions

      	Parameters:

      		width - The containing rectangle maximum width as integer
      		height - The containing rectangle maximum height as integer

      */	
      NETXUS.RectanglePacker = function ( width, height ) {

      	this.root = {};

      	// initialize
      	this.reset( width, height );	
      }


      /*
      	Resets the object to its initial state by initializing the internal variables

      	Parameters:

      		width - The containing rectangle maximum width as integer
      		height - The containing rectangle maximum height as integer
      */
      NETXUS.RectanglePacker.prototype.reset = function ( width, height ) {
      	this.root.x = 0;
      	this.root.y = 0;
      	this.root.w = width;
      	this.root.h = height;
      	delete this.root.lft;
      	delete this.root.rgt;

      	this.usedWidth = 0;
      	this.usedHeight = 0;	
      }


      /*
      	Returns the actual used dimensions of the containing rectangle.

      	Returns:

      		A object composed of the properties: 'w' for width and 'h' for height. 
      */
      NETXUS.RectanglePacker.prototype.getDimensions = function () {
      	return { w: this.usedWidth, h: this.usedHeight };	
      }


      /*
       	Finds a suitable place for the given rectangle

      	Parameters:

      		w - The rectangle width as integer.
      		h - The rectangle height as integer.

      	Returns:

      		If there is room for the rectangle then returns the coordinates as an object 
      		composed of 'x' and 'y' properties. 
      		If it doesn't fit returns null
      */  	
      NETXUS.RectanglePacker.prototype.findCoords = function ( w, h ) {

      	// private function to traverse the node tree by recursion
      	function recursiveFindCoords ( node, w, h ) {

      		// private function to clone a node coords and size
      		function cloneNode ( node ) {
      			return {
      				x: node.x,
      				y: node.y,
      				w: node.w,
      				h: node.h	
      			};
      		}		

      		// if we are not at a leaf then go deeper
      		if ( node.lft ) {
      			// check first the left branch if not found then go by the right
      			var coords = recursiveFindCoords( node.lft, w, h );
      			return coords ? coords : recursiveFindCoords( node.rgt, w, h );	
      		}
      		else
      		{
      			// if already used or it's too big then return
      			if ( node.used || w > node.w || h > node.h )
      				return null;

      			// if it fits perfectly then use this gap
      			if ( w == node.w && h == node.h ) {
      				node.used = true;
      				return { x: node.x, y: node.y };
      			}

      			// initialize the left and right leafs by clonning the current one
      			node.lft = cloneNode( node );
      			node.rgt = cloneNode( node );

      			// checks if we partition in vertical or horizontal
      			if ( node.w - w > node.h - h ) {
      				node.lft.w = w;
      				node.rgt.x = node.x + w;
      				node.rgt.w = node.w - w;	
      			} else {
      				node.lft.h = h;
      				node.rgt.y = node.y + h;
      				node.rgt.h = node.h - h;							
      			}

      			return recursiveFindCoords( node.lft, w, h );		
      		}
      	}

      	// perform the search
      	var coords = recursiveFindCoords( this.root, w, h );
      	// if fitted then recalculate the used dimensions
      	if (coords) {
      		if ( this.usedWidth < coords.x + w )
      			this.usedWidth = coords.x + w;
      		if ( this.usedHeight < coords.y + h )
      			this.usedHeight = coords.y + h;
      	}
      	return coords;
      }
      var doit = function () {
        var coords;
        var packer = new NETXUS.RectanglePacker(
          window.innerWidth, 
          window.innerHeight
        );
        $images = $('img');
        $images.hide();
        $container = $('.activity-screen');
        $container.shuffle();
        $images = $('img');
        $images.each(
          function (i, image) {
            var factor = Math.floor(Math.random() * 5);
            var w, h, target = $(image);
            if (!target.attr('original-width')) {
              target.attr({'original-width': target.width()});
            }
            w = target.attr('original-width') / factor;
            if (!target.attr('original-height')) {
              target.attr({'original-height': target.height()});
            }
            h = target.attr('original-height') / factor;
            coords = packer.findCoords(w, h);
            if (coords) {
              target.show();
              target.css({
                  'width': '' + w + 'px',
                  'height': '' + h + 'px',
                  'left': '' + coords.x + 'px',
                  'top': '' + coords.y + 'px'
              });
            }
            else {
              target.hide();
            }
          }
        );
      }
      window.setInterval(doit, 10000);
      doit();
    </script>
  </body>
</html>
